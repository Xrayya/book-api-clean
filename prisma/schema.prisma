// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String
  token     String?
  suspended Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  borrowing Borrowing[]

  @@map("user")
}

model Book {
  id            Int      @id @default(autoincrement())
  title         String
  author        String
  ISBN          String   @unique @map("isbn")
  publisher     String
  publishedDate DateTime @map("published_date")
  categoryCode  String   @map("category_code")
  edition       Int
  available     Boolean
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  category  BookCategory @relation(fields: [categoryCode], references: [code])
  borrowing Borrowing[]

  @@index(fields: [ISBN])
  @@map("book")
}

model BookCategory {
  code String @id
  name String

  Book Book[]

  @@map("book_category")
}

model Borrowing {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  bookId     Int      @map("book_id")
  borrowDate DateTime @map("borrow_date")
  returnDate DateTime @map("return_date")
  isReturned Boolean  @default(false) @map("returned")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@map("borrowing")
}
